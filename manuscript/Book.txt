Frontmatter.txt

01-foreword.md
02-preface.md
03-introduction.md

Mainmatter.txt

04-Packaging.md
packaging/01-where-to-start.md
packaging/02-anatomy.md
packaging/03-versioning.md
packaging/04-releases.md
packaging/05-monorepos.md

05-Code-Quality.md
code-quality/01-code-style.md
code-quality/02-linting.md
code-quality/03-testing.md
code-quality/04-metrics.md
code-quality/05-services.md
code-quality/06-dependencies.md

06-Infrastructure.md
infrastructure/01-issue-tracking.md
intrastructure/02-support.md
intrastructure/03-continuous-integration.md
intrastructure/04-automation.md

07-Documentation.md
documentation/01-readme.md
documentation/02-site.md
documentation/03-tools.md
documentation/04-hosting.md

08-Future.md
future/01-longevity.md
future/02-development-models.md
future/03-marketing.md

Backmatter.txt

14-Conclusion.md

15-Appendices.md

appendices/01-tree-shaking.md

TODO: figure out a better name

* Foreword - We need to figure out some good package author for this. Not needed for initial versions.
* Preface ☆
* Introduction ☆

* Packaging
  * Where to start? (package name, figuring out what exists already, considering pros/cons of starting a new project,
consider contribution to existing project, what to do if you want to contribute but the original author is “dead”) ☆
  * Anatomy of a package (what goes to a package, show concrete examples) ☆
  * Versioning Models (SemVer, ComVer, basic info, but needed so people understand the point) ☆
  * Releases (semantic-release, commit conventions, change logs) ✠
  * Monorepo vs. separate (configuration topic, mrm) ✠

* Code Quality
  * Code style (EditorConfig, prettier) ✠
  * Linting (JS, styles, text, lint-staged) ✠
  * Testing (code coverage)
  * Metrics (code complexity, others)
  * Services (external services related to code quality - alternative: push to chapter sections)
  * Updating (greenkeeper.io, npm-upgrade)

* Infrastructure
  * Issue Tracking (triaging, managing issues and support, what kind of labels to maintain and how) ☆
  * Support (chat, Stack Overflow, how to manage) ☆
  * Continuous Integration
  * Automation (bots, danger.js)

* Documentation
  * README Driven Development (documentation as first class citizen vs. afterthought) ☆
  * How/why to maintain a site (hosted demos, usage gifs, marketing, first impressions)
  * Tools (TOC generation, Styleguidist, etc.) ✠
  * Hosting (GitHub pages, Netlify) ☆

* Future
  * Longevity (as in why to consider the business aspect, burnout, collaboration) ☆
  * Development Models ☆
  * Marketing (tech, strategy) ☆

* Conclusion

* Appendices
  * Tree shaking (with webpack/rollup) - Linked from packaging unless this is a core topic ☆
  * Tracking Dependencies - Another extra topic for packaging ☆